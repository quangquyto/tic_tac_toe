{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","index.js"],"names":["Square","highlight","onClick","value","className","Board","winline","squares","renderSquare","i","includes","Board_square","r","row","c","push","renderRow","calculateWinner","isDraw","lines","length","a","b","d","e","Win","line","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setxIsNext","isAscending","setisAscending","current","winner","stepnumber","win","isascending","moves","map","step","move","latestMoveSquare","latemove","col","Math","floor","desc","jumpTo","reverse","newHistory","slice","concat","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ad1b0a4.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Square=({highlight,onClick,value})=>\r\n(\r\n<button className={'square'+(highlight ? \" highlight\" : \"\")}\r\nonClick={onClick}>\r\n  {value}\r\n</button>\r\n);\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"../Square\";\r\nconst Board=({winline,squares,onClick})=>\r\n{\r\n    const renderSquare=(i)=>\r\n    {\r\n        return (<Square value={squares[i]} \r\n                    onClick={() =>onClick(i)}\r\n                    highlight={winline && winline.includes(i)}           \r\n              />\r\n              );\r\n    }\r\n     const renderRow=()=>\r\n      {\r\n        const Board_square=[]\r\n        for(let r=0;r<5;r++){\r\n          const row=[];\r\n          for(let c=0;c<5;c++){\r\n              row.push(<span key={(r*5+c)}>{renderSquare(r*5+c)}</span>)\r\n          }\r\n          Board_square.push(<div key={r} className=\"board-row\">{row}</div>)\r\n        }\r\n        return Board_square;\r\n    }\r\n    \r\n        return (\r\n          <div>\r\n            {renderRow()}\r\n          </div>\r\n        );\r\n    \r\n    \r\n}\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport Board from \"../Board\";\r\nconst Game=()=>{\r\n    const [history,setHistory]=useState ([{\r\n        squares: Array(25).fill(null),\r\n      }]);\r\n    const [stepNumber,setStepNumber]=useState(0);\r\n    const [xIsNext,setxIsNext]=useState(true);\r\n    const [isAscending,setisAscending]=useState(true);\r\n    const jumpTo=(step)=>\r\n    {\r\n          setStepNumber(step);\r\n          setxIsNext(step%2===0);\r\n    }\r\n    const handleClick=(i)=>\r\n    {\r\n        const newHistory=history.slice(0,stepNumber+1);\r\n        const current=newHistory[newHistory.length-1];\r\n        const squares=current.squares.slice();\r\n        if (calculateWinner(squares).Win ) {\r\n          return;\r\n        }\r\n        if(squares[i]){\r\n          return;\r\n        }\r\n        squares[i] = xIsNext ? 'X' : 'O';\r\n        setHistory(newHistory.concat([{\r\n            squares: squares,\r\n            latemove:i,\r\n          }]));\r\n        setStepNumber(newHistory.length);\r\n        setxIsNext(!xIsNext);\r\n    }\r\n      const newHistory=history;\r\n      const current=newHistory[stepNumber];\r\n      const winner=calculateWinner(current.squares);\r\n      const stepnumber=stepNumber;\r\n      const win=winner.Win;\r\n      const isascending =isAscending;\r\n      let moves=history.map((step,move)=>{\r\n        const latestMoveSquare = step.latemove;\r\n        const col = 1 + latestMoveSquare % 5;\r\n        const row = 1 + Math.floor(latestMoveSquare / 5);\r\n        const desc=move?\r\n        'Go to move #'+move + '('+col+','+row+')':\r\n        'Go to game start';\r\n        return(\r\n          <li key={move}>\r\n            <button className={move===stepnumber?\"current-item-selected\":\"\"}\r\n            onClick={()=>jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        )\r\n  \r\n      }\r\n      )\r\n      if (!isascending) {\r\n        moves.reverse();\r\n      }\r\n  \r\n      let status;\r\n      if (winner.Win) {\r\n        status = 'Winner: ' + win;\r\n      } \r\n      else if(winner.isDraw)\r\n        status=\"The match is Draw\";\r\n      else\r\n        status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n      \r\n      return(\r\n        <div className=\"game\">\r\n          <div className=\"game-board\"><Board squares={current.squares} \r\n                                      onClick={(i)=>handleClick(i)}\r\n                                      winline={winner.line} /></div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <button onClick={() => setisAscending(!isAscending)}>\r\n            {isAscending ? 'descending' : 'ascending'}\r\n          </button>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n};\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2,3,4],\r\n      [5, 6, 7,8,9],\r\n      [10,11, 12,13,14],\r\n      [15,16, 17, 18,19],\r\n      [20, 21, 22,23,24],\r\n      [0, 5, 10,15,20],\r\n      [1,6,11, 16, 21],\r\n      [2, 7, 12,17,22],\r\n      [3,8,13,18,23],\r\n      [4,9,14,19,24],\r\n      [0,6,12,18,24],\r\n      [4,8,12,16,20]\r\n    ];\r\n    let isDraw;\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c,d,e] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a]===squares[d] &&squares[a]===squares[e]) {\r\n        return {\r\n        Win: squares[a],\r\n        line: [a,b,c,d,e],\r\n        isDraw:false,\r\n            };\r\n      }\r\n    } \r\n    isDraw=true;\r\n    for(let i=0;i<squares.length;i++){\r\n      if(squares[i]===null){\r\n        isDraw=false\r\n        break;\r\n      }\r\n  \r\n    }\r\n    return {\r\n      Win: null,\r\n      isDraw:isDraw,\r\n    };\r\n    \r\n  }\r\nexport default Game;","import React from \"react\";\r\nimport  ReactDOM  from \"react-dom\";\r\nimport './index.css';\r\nimport Game from './components/Game'\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}